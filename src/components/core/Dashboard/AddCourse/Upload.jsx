// React hooks for local state, refs and side-effects
import { useEffect, useRef, useState } from "react"
// Drag & drop utility for files
import { useDropzone } from "react-dropzone"
// Upload icon for empty state UI
import { FiUploadCloud } from "react-icons/fi"

// Video player component for video preview - migrated to ReactPlayer
import ReactPlayer from 'react-player';

// Generic Upload component for image/video with drag & drop + preview
export default function Upload({
  name,
  label,
  register,
  setValue,
  errors,
  video = false,
  viewData = null,
  editData = null,
}) {
  // Note: no global state needed here
  // Holds the currently selected File object
  const [selectedFile, setSelectedFile] = useState(null)
  // Preview source (DataURL or provided URL in view/edit modes)
  const [previewSource, setPreviewSource] = useState(
    viewData ? viewData : editData ? editData : ""
  )
  // Ref to the hidden input generated by useDropzone
  const inputRef = useRef(null)

  // Handle files dropped/selected via dropzone
  const onDrop = (acceptedFiles) => {
    const file = acceptedFiles[0]
    if (file) {
      previewFile(file)
      setSelectedFile(file)
    }
  }

  // Configure dropzone: accept types based on image/video mode
  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    accept: !video
      ? { "image/*": [".jpeg", ".jpg", ".png", ".webp"] }
      : { "video/*": [".mp4"] },
    onDrop,
  })

  // Generate a DataURL for local preview
  const previewFile = (file) => {
    // console.log(file)
    const reader = new FileReader()
    reader.readAsDataURL(file)
    reader.onloadend = () => {
      setPreviewSource(reader.result)
    }
  }

  // Register this field with RHF (required)
  useEffect(() => {
    register(name, { required: true })
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [register])

  // Sync selected file back into RHF form state
  useEffect(() => {
    setValue(name, selectedFile)
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedFile, setValue])

  return (
    <div className="flex flex-col space-y-2">
      {/* Field label with required indicator in editable mode */}
      <label className="mb-1 text-[0.875rem] leading-[1.375rem] text-richblack-5" htmlFor={name}>
        {label} {!viewData && <sup className="text-pink-200">*</sup>}
      </label>
      <div
        className={`${
          isDragActive ? "bg-richblack-600" : "bg-richblack-700"
        } flex min-h-[250px] cursor-pointer items-center justify-center rounded-md border-2 border-dotted border-richblack-500`}
        {...getRootProps({ onClick: () => inputRef.current && inputRef.current.click() })}
      >
        {/* Hidden input managed by dropzone; clicking root opens picker */}
        <input {...getInputProps()} ref={inputRef} />
        {previewSource ? (
          <div className="flex w-full flex-col p-6">
            {/* Show image or video preview based on mode */}
            {!video ? (
              <img
                src={previewSource}
                alt="Preview"
                className="h-full w-full rounded-md object-cover"
              />
            ) : (
              <div className="w-full" style={{ aspectRatio: '16/9' }}>
                <ReactPlayer
                  url={previewSource}
                  width="100%"
                  height="100%"
                  controls={true}
                  config={{
                    file: {
                      attributes: {
                        playsInline: true,
                        style: { width: '100%', height: '100%' }
                      }
                    }
                  }}
                  style={{
                    borderRadius: '8px',
                    overflow: 'hidden'
                  }}
                />
              </div>
            )}
            {/* Allow clearing selection only in editable mode */}
            {!viewData && (
              <button
                type="button"
                onClick={() => {
                  setPreviewSource("")
                  setSelectedFile(null)
                  setValue(name, null)
                }}
                className="mt-3 text-richblack-400 underline"
              >
                Cancel
              </button>
            )}
          </div>
        ) : (
          <div className="flex w-full flex-col items-center p-6">
            <div className="grid aspect-square w-14 place-items-center rounded-full bg-pure-greys-800">
              <FiUploadCloud className="text-2xl text-yellow-50" />
            </div>
            <p className="mt-2 max-w-[200px] text-center text-sm text-richblack-200">
              Drag and drop an {!video ? "image" : "video"}, or click to{" "}
              <span className="font-semibold text-yellow-50">Browse</span> a
              file
            </p>
            <ul className="mt-10 flex list-disc justify-between space-x-12 text-center  text-xs text-richblack-200">
              <li>Aspect ratio 16:9</li>
              <li>Recommended size 1024x576</li>
            </ul>
          </div>
        )}
      </div>
      {/* Validation error text */}
      {errors[name] && (
        <span className="ml-2 text-xs tracking-wide text-pink-200">
          {label} is required
        </span>
      )}
    </div>
  )
}