import { useState } from "react";
import { Chart, registerables } from "chart.js";
import { Pie } from "react-chartjs-2";

// Register Chart.js components globally to enable pie chart functionality
Chart.register(...registerables);

export default function InstructorChart({ courses }) {
  // State to manage which chart view is currently active (students or income)
  const [currChart, setCurrChart] = useState("students");

  // If no courses or all courses have 0 data, show a default message
  if (!courses || courses.length === 0) {
    return (
      <div className="flex flex-1 flex-col gap-y-4 rounded-md bg-richblack-800 p-6">
        <p className="text-lg font-bold text-richblack-5">Visualize</p>
        <div className="flex items-center justify-center h-full">
          <p className="text-xl font-medium text-richblack-50">
            No courses available to visualize
          </p>
        </div>
      </div>
    );
  }

  // Beautiful color palette for chart segments
  const getChartColors = (numColors) => {
    const colorPalette = [
      "#FF6B6B", // Coral Red
      "#4ECDC4", // Turquoise
      "#45B7D1", // Sky Blue
      "#96CEB4", // Mint Green
      "#FFEAA7", // Light Yellow
      "#DDA0DD", // Plum
      "#98D8C8", // Mint
      "#F7DC6F", // Light Gold
      "#BB8FCE", // Light Purple
      "#85C1E9", // Light Blue
      "#F8C471", // Peach
      "#82E0AA", // Light Green
      "#F1948A", // Light Coral
      "#85C1E9", // Baby Blue
      "#F4D03F", // Sunny Yellow
    ];
    
    // Return colors based on number needed
    return colorPalette.slice(0, numColors);
  };

  // Helper function to truncate long course names
  const truncateName = (name, maxLength = 25) => {
    return name.length > maxLength ? name.substring(0, maxLength - 3) + '...' : name;
  };

  // Chart configuration for student enrollment data
  // Creates a pie chart showing student distribution across courses
  const chartDataStudents = {
    labels: courses.map((course) => truncateName(course.courseName)), // Truncated course names as labels
    datasets: [
      {
        // Data points represent number of students enrolled in each course
        data: courses.map((course) => course.totalStudentsEnrolled || 0),
        // Use beautiful color palette for each course segment
        backgroundColor: getChartColors(courses.length),
      },
    ],
  };

  // Chart configuration for income/revenue data
  // Creates a pie chart showing income distribution across courses
  const chartIncomeData = {
    labels: courses.map((course) => truncateName(course.courseName)), // Truncated course names as labels
    datasets: [
      {
        // Data points represent total revenue generated by each course
        data: courses.map((course) => course.totalAmountGenerated || 0),
        // Use beautiful color palette for each course segment
        backgroundColor: getChartColors(courses.length),
      },
    ],
  };

  // Chart.js configuration options
  const options = {
    maintainAspectRatio: false,
    responsive: true,
    plugins: {
      legend: {
        position: "right",
        labels: {
          color: "#F1F2FF",
          padding: 12,
          usePointStyle: true,
          font: {
            size: 13,
            weight: "600",
          },
          boxWidth: 12,
          boxHeight: 12,
        },
      },
      tooltip: {
        callbacks: {
          title: function(context) {
            const index = context[0].dataIndex;
            return courses[index]?.courseName || "";
          },
          label: function (context) {
            const value =
              currChart === "students"
                ? `${context.parsed} students`
                : `Rs. ${context.parsed}`;
            return value;
          },
        },
        backgroundColor: "rgba(17, 24, 39, 0.95)",
        titleColor: "#F9FAFB",
        bodyColor: "#F9FAFB",
        borderColor: "#6B7280",
        borderWidth: 1,
        cornerRadius: 8,
        displayColors: true,
      },
    },
    layout: {
      padding: {
        top: 10,
        bottom: 10,
        left: 10,
        right: 30,
      },
    },
  }

  return (
    <div className="flex flex-1 flex-col gap-y-4 rounded-md bg-richblack-800 p-6">
      {/* Chart section header */}
      <p className="text-lg font-bold text-richblack-5">Visualize</p>

      {/* Toggle buttons for switching between chart types */}
      <div className="space-x-4 font-semibold">
        {/* Students chart toggle button */}
        <button
          onClick={() => setCurrChart("students")} // Switch to students view
          className={`rounded-sm p-1 px-3 transition-all duration-200 ${
            // Conditional styling: active button gets highlighted background
            currChart === "students"
              ? "bg-richblack-700 text-yellow-50" // Active state styling
              : "text-yellow-400" // Inactive state styling
          }`}
        >
          Students
        </button>

        {/* Income chart toggle button */}
        <button
          onClick={() => setCurrChart("income")} // Switch to income view
          className={`rounded-sm p-1 px-3 transition-all duration-200 ${
            // Conditional styling: active button gets highlighted background
            currChart === "income"
              ? "bg-richblack-700 text-yellow-50" // Active state styling
              : "text-yellow-400" // Inactive state styling
          }`}
        >
          Income
        </button>
      </div>

      {/* Chart container with left-right layout */}
      <div className="flex-1 flex items-center justify-center min-h-[350px] p-4">
        <div className="w-full h-full max-w-[650px] max-h-[350px] flex items-center justify-center">
          {/* Pie chart component with conditional data rendering */}
          <Pie
            // Render different datasets based on selected chart type
            data={currChart === "students" ? chartDataStudents : chartIncomeData}
            options={options} // Apply chart configuration options
          />
        </div>
      </div>
    </div>
  );
}
